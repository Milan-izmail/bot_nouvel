from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType

# –°—Ç–∞–Ω–∏ —Ñ–æ—Ä–º–∏ —Å–ø–∏—Å–∞–Ω–Ω—è –∫–≤—ñ—Ç—ñ–≤
class WriteOffForm(StatesGroup):
    store = State()
    florist_name = State()
    flower_name = State()
    flower_height = State()
    flower_price = State()
    photo = State()
    confirm_more = State()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω—ñ–≤
store_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–ü–∞—Å–∞–∂"),
    KeyboardButton("–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞"),
    KeyboardButton("–¢–µ—Ä–µ–º–∫–∏"),
    KeyboardButton("–ü—É–ª—é—è")
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥—ñ–π
action_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ"),
    KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏")
)

def register_writeoff_handlers(dp: Dispatcher):
    @dp.message_handler(lambda msg: msg.text == "üì¶ –°–ø–∏—Å–∞–Ω–Ω—è –∫–≤—ñ—Ç—ñ–≤", state="*")
    async def start_writeoff(message: types.Message, state: FSMContext):
        await message.answer("üìç –í–∏–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=store_keyboard)
        await WriteOffForm.store.set()

    @dp.message_handler(state=WriteOffForm.store)
    async def get_store(message: types.Message, state: FSMContext):
        await state.update_data(store=message.text)
        await message.answer("üë©‚Äçüé® –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞:")
        await WriteOffForm.florist_name.set()

    @dp.message_handler(state=WriteOffForm.florist_name)
    async def get_florist_name(message: types.Message, state: FSMContext):
        await state.update_data(florist_name=message.text)
        await message.answer("üå∏ –ù–∞–∑–≤–∞ –∫–≤—ñ—Ç–∫–∏:")
        await WriteOffForm.flower_name.set()

    @dp.message_handler(state=WriteOffForm.flower_name)
    async def get_flower_name(message: types.Message, state: FSMContext):
        await state.update_data(flower_name=message.text)
        await message.answer("üìè –ó—Ä—ñ—Å—Ç –∫–≤—ñ—Ç–∫–∏ (–≤ —Å–º):")
        await WriteOffForm.flower_height.set()

    @dp.message_handler(state=WriteOffForm.flower_height)
    async def get_height(message: types.Message, state: FSMContext):
        await state.update_data(flower_height=message.text)
        await message.answer("üí∞ –¶—ñ–Ω–∞ –Ω–∞ –≤—ñ—Ç—Ä–∏–Ω—ñ (–≥—Ä–Ω):")
        await WriteOffForm.flower_price.set()

    @dp.message_handler(state=WriteOffForm.flower_price)
    async def get_price(message: types.Message, state: FSMContext):
        await state.update_data(flower_price=message.text)
        await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Å–ø–∏—Å–∞–Ω–æ—ó –∫–≤—ñ—Ç–∫–∏:")
        await WriteOffForm.photo.set()

    @dp.message_handler(state=WriteOffForm.photo, content_types=ContentType.PHOTO)
    async def get_photo(message: types.Message, state: FSMContext):
        data = await state.get_data()

        flower_data = {
            "flower_name": data["flower_name"],
            "flower_height": data["flower_height"],
            "flower_price": data["flower_price"],
            "photo_id": message.photo[-1].file_id
        }

        flower_list = data.get("flower_list", [])
        flower_list.append(flower_data)
        await state.update_data(flower_list=flower_list)

        await message.answer("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ. –î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É –∫–≤—ñ—Ç–∫—É —á–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–∏?", reply_markup=action_keyboard)
        await WriteOffForm.confirm_more.set()

    @dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", state=WriteOffForm.confirm_more)
    async def add_another_flower(message: types.Message, state: FSMContext):
        await message.answer("üå∏ –ù–∞–∑–≤–∞ –∫–≤—ñ—Ç–∫–∏:")
        await WriteOffForm.flower_name.set()

    @dp.message_handler(lambda msg: msg.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", state=WriteOffForm.confirm_more)
    async def finish_writeoff(message: types.Message, state: FSMContext):
        data = await state.get_data()

        summary_text = (
            f"üì¶ *–°–ø–∏—Å–∞–Ω–Ω—è –∫–≤—ñ—Ç—ñ–≤*\n\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {data['store']}\n"
            f"üë©‚Äçüé® –§–ª–æ—Ä–∏—Å—Ç: {data['florist_name']}\n"
            f"üìÖ –°–ø–∏—Å–∞–Ω–æ –∫–≤—ñ—Ç—ñ–≤: {len(data['flower_list'])}"
        )

        admin_chat_id = -1002580389822  # üîÅ –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤–∞—à ID –≥—Ä—É–ø–∏

        await message.answer("üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–≤—ñ—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É...")

        for flower in data["flower_list"]:
            caption = (
                f"üå∏ *{flower['flower_name']}*\n"
                f"üìè –ó—Ä—ñ—Å—Ç: {flower['flower_height']} —Å–º\n"
                f"üí∞ –¶—ñ–Ω–∞: {flower['flower_price']} –≥—Ä–Ω"
            )
            await message.bot.send_photo(admin_chat_id, photo=flower["photo_id"], caption=caption, parse_mode="Markdown")

        await message.bot.send_message(admin_chat_id, summary_text, parse_mode="Markdown")
        await message.answer("‚úÖ –°–ø–∏—Å–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        await state.finish()
